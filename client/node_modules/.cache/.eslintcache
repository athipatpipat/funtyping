[{"/Users/poom/Desktop/funtyping/client/src/index.js":"1","/Users/poom/Desktop/funtyping/client/src/App.js":"2","/Users/poom/Desktop/funtyping/client/src/reportWebVitals.js":"3","/Users/poom/Desktop/funtyping/client/src/components/InteractionSpace.js":"4","/Users/poom/Desktop/funtyping/client/src/components/TextEditor.js":"5","/Users/poom/Desktop/funtyping/client/src/components/Animations.js":"6"},{"size":500,"mtime":1622712204509,"results":"7","hashOfConfig":"8"},{"size":202,"mtime":1622712204478,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1622712204509,"results":"10","hashOfConfig":"8"},{"size":307,"mtime":1622712204508,"results":"11","hashOfConfig":"8"},{"size":18549,"mtime":1623082537188,"results":"12","hashOfConfig":"8"},{"size":1110,"mtime":1622712204508,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"3pudzr",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/Users/poom/Desktop/funtyping/client/src/index.js",[],["30","31"],"/Users/poom/Desktop/funtyping/client/src/App.js",[],"/Users/poom/Desktop/funtyping/client/src/reportWebVitals.js",[],"/Users/poom/Desktop/funtyping/client/src/components/InteractionSpace.js",["32"],"import { useState } from 'react';\nimport Animations from './Animations'\nimport TextEditor from './TextEditor'\n\nfunction InteractionSpace() {\n    return (\n        <div className=\"InteractionSpace\">\n            <Animations />\n            <TextEditor />\n\n        </div>\n    )\n}\n\nexport default InteractionSpace","/Users/poom/Desktop/funtyping/client/src/components/TextEditor.js",["33","34","35","36","37","38"],"// ========================================\n//           Import Dependencies\n// ========================================\nimport { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport useSound from 'use-sound';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n// ========================================\n//           Initial Sounds Import\n// ========================================\nimport bubbleSound from '../assets/bubbles.mp3'\nimport claySound from '../assets/clay.mp3'\nimport confettiSound from '../assets/confetti.mp3'\nimport coronaSound from '../assets/corona.mp3'\nimport dottedSound from '../assets/dotted-spiral.mp3'\nimport flash1Sound from '../assets/flash-1.mp3'\nimport flash2Sound from '../assets/flash-2.mp3'\nimport flash3Sound from '../assets/flash-3.mp3'\nimport glimmerSound from '../assets/glimmer.mp3'\nimport moonSound from '../assets/moon.mp3'\nimport pinwheelSound from '../assets/pinwheel.mp3'\nimport piston1Sound from '../assets/piston-1.mp3'\nimport piston2Sound from '../assets/piston-2.mp3'\nimport piston3Sound from '../assets/piston-3.mp3'\nimport prism1Sound from '../assets/prism-1.mp3'\nimport prism2Sound from '../assets/prism-2.mp3'\nimport prism3Sound from '../assets/prism-3.mp3'\nimport splitsSound from '../assets/splits.mp3'\nimport squiggleSound from '../assets/squiggle.mp3'\nimport strikeSound from '../assets/strike.mp3'\nimport suspensionSound from '../assets/suspension.mp3'\nimport timerSound from '../assets/timer.mp3'\nimport ufoSound from '../assets/ufo.mp3'\nimport veilSound from '../assets/veil.mp3'\nimport wipeSound from '../assets/wipe.mp3'\nimport zigzagSound from '../assets/zig-zag.mp3'\n\nfunction TextEditor() {\n    // =====================================\n    //              Define States\n    // =====================================\n    const [text, setText] = useState(''); // Text Area State\n    const [soundA, setSoundA] = useState(bubbleSound) // Sounds State\n    const [sound, setSound] = useState({             // Sounds State V2\n        'A': bubbleSound,\n        'B': claySound,\n        'C': confettiSound\n    })\n    const [soundCount, setSoundCount] = useState({\n        'A': 0,\n        'B': 0,\n        'C': 0\n    })\n\n    const [form, setForm] = useState({}) // Form State\n    const [errors, setErrors] = useState({}) // Form Validation State\n    const [show, setShow] = useState(false); // Model (Pop-up Form) State\n    const [currHash, setCurrHash] = useState(''); \n\n\n    const letterArray = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\n    'M', 'N', 'O', 'P', 'Q', 'R',  'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z' ];\n\n    const playSound = (e) => {\n        const key = e.key.toLowerCase();\n        switch (key) {\n            case 'a': \n                playA();\n                break;\n            case 'b': \n                playB();\n                break;\n            case 'c':\n                playC();\n                break;\n            case 'd':\n                playD();\n                break;\n            case 'e':\n                playE();\n                break;\n            case 'f':\n                playF();\n                break;\n            case 'g':\n                playG();\n                break;\n            case 'h':\n                playH();\n                break;\n            case 'i':\n                playI();\n                break;\n            case 'j':\n                playJ();\n                break;\n            case 'k':\n                playK();\n                break;\n            case 'l':\n                playL();\n                break;\n            case 'm':\n                playM();\n                break;\n            case 'n':\n                playN();\n                break;\n            case 'o':\n                playO();  \n                break;\n            case 'p':\n                playP(); \n                break;\n            case 'q':\n                playQ();\n                break;\n            case 'r':\n                playR();\n                break;\n            case 's':\n                playS();\n                break;\n            case 't':\n                playT();\n                break;\n            case 'u':\n                playU();\n                break;\n            case 'v':\n                playV();\n                break;\n            case 'w':\n                playW();\n                break;\n            case 'x':\n                playX();\n                break;\n            case 'y':\n                playY();\n                break;\n            case 'z':\n                playZ();\n                break;\n            default:\n                const randomIndex = Math.floor(Math.random() * 26);\n                const randomLetter = letterArray[randomIndex];\n                console.log(key);\n                console.log(`play${randomLetter}()`);\n                eval(`play${randomLetter}()`);\n                break;\n        }\n    }\n    \n    let [playA] = useSound(\n        sound['A'], {\n        //soundA, {\n            interrupt: true,\n        });\n\n    const [playB] = useSound(\n        sound['B'], {\n        //claySound, {\n            interrupt: true,\n        });\n\n    const [playC] = useSound(\n        sound['C'], {\n        // confettiSound, {\n            interrupt: true,\n        });\n    \n    const [playD] = useSound(\n        dottedSound, {\n            interrupt: true,\n        });\n\n    const [playE] = useSound(\n        flash1Sound, {\n            interrupt: true,\n        });\n\n    const [playF] = useSound(\n        flash2Sound, {\n            interrupt: true,\n        });\n\n    const [playG] = useSound(\n        flash3Sound, {\n            interrupt: true,\n        });\n\n    const [playH] = useSound(\n        glimmerSound, {\n            interrupt: true,\n        });\n\n    const [playI] = useSound(\n        moonSound, {\n            interrupt: true,\n        });\n\n    const [playJ] = useSound(\n        pinwheelSound, {\n            interrupt: true,\n        });\n\n    const [playK] = useSound(\n        piston1Sound, {\n            interrupt: true,\n        });\n\n    const [playL] = useSound(\n        piston2Sound, {\n            interrupt: true,\n        });\n\n    const [playM] = useSound(\n        piston3Sound, {\n            interrupt: true,\n        });\n\n    const [playN] = useSound(\n        prism1Sound, {\n            interrupt: true,\n        });\n\n    const [playO] = useSound(\n        prism2Sound, {\n            interrupt: true,\n        });\n\n    const [playP] = useSound(\n        prism3Sound, {\n            interrupt: true,\n        });\n\n    const [playQ] = useSound(\n        coronaSound, {\n            interrupt: true,\n        });\n    const [playR] = useSound(\n        splitsSound, {\n            interrupt: true,\n        });\n\n    const [playS] = useSound(\n        squiggleSound, {\n            interrupt: true,\n        });\n\n    const [playT] = useSound(\n        strikeSound, {\n            interrupt: true,\n        });\n\n    const [playU] = useSound(\n        suspensionSound, {\n            interrupt: true,\n        });\n\n    const [playV] = useSound(\n        timerSound, {\n            interrupt: true,\n        });\n\n    const [playW] = useSound(\n        ufoSound, {\n            interrupt: true,\n        });\n\n    const [playX] = useSound(\n        veilSound, {\n            interrupt: true,\n        });\n\n    const [playY] = useSound(\n        wipeSound, {\n            interrupt: true,\n        });\n        \n    const [playZ] = useSound(\n        zigzagSound, {\n            interrupt: true,\n        });\n\n    // ================================================\n    //                   Change Sound\n    // ================================================\n    const setSoundKey = (key, newSound) => {\n        setSound({\n            ...sound,\n            [key]: newSound\n          })\n    }\n\n    const setSoundCountKey = (key, newCount) => {\n        setSoundCount({\n            ...soundCount,\n            [key]: newCount\n        })\n    }\n \n    const getHashName = () => {\n        const key = form['key'];\n        fetch(`http://localhost:5000/${key}`)\n            // .then(response => response.json())\n            .then(async response => {\n                const resposneMessage = await response.json();\n                return resposneMessage\n            })\n            .then(response => {\n                console.log('setting hash state.')\n                console.log(`curr hash: ${response.hashname}`)\n                setCurrHash(response.hashname)\n            })\n    }\n\n    useEffect(() => {\n        deleteOldSound()\n    }, [currHash])\n\n    const deleteOldSound = () => {\n        console.log(`deleting ${currHash}`); \n        fetch(`http://localhost:5000/${currHash}`, {\n            method: 'DELETE'\n        })\n        .then(async response => {\n            const resposneMessage = await response.json();\n            console.log(`finish deleting ${currHash}`)\n        })\n        .then(() => {\n            console.log('start uploading new sound...')\n            uploadSound()\n        })\n    }\n\n    const uploadSound = () => {\n        var soundForm = document.getElementById('soundForm');\n        var formData = new FormData(soundForm);\n        fetch('http://localhost:5000/upload', {\n                method: 'POST',\n                body: formData\n            })\n            .then(async response => {\n                console.log('finish uploading new sound!');\n                const resposneMessage = await response.json();\n                return resposneMessage;\n            })\n            .then((response) => {\n                console.log('start mapping the new sound to a key')\n                console.log(`key: ${response.key}`)\n                console.log(`sound: ${response.hashname}`)\n                changeKeySound(response.key, response.hashname);\n            })\n            .then(() => {\n                setForm({})\n                setErrors({})\n                setShow(false);\n            })\n            .catch(e => console.log(e))\n    }\n\n    const changeKeySound = (key, hashname) => {\n        fetch(`http://localhost:5000/file/${hashname}`)\n            .then(async response => {\n                const newSound = await response.url;\n                console.log(\"done mapping to key to new sound\")\n                console.log(`${key} : ${hashname}`)\n                console.log('new sound:', newSound)\n                setSoundKey(key, newSound);\n            })\n            .then(() => {\n                console.log(\"finish uploading the sound\")\n                alert('New Sound Upload!')\n            })\n            // .then(deleteOldSound(key))\n            .catch(e => console.log(e))\n    }\n\n\n    // const uploadSound = () => {\n    //     let soundForm = document.getElementById('soundForm');\n    //     let formData = new FormData(soundForm);\n    //     fetch('http://localhost:5000/upload', {\n    //             method: 'POST',\n    //             body: formData\n    //         })\n    //         .then(async response => {\n    //             console.log('finish uploading:', response);\n    //             const resposneMessage = await response.json();\n    //             return resposneMessage;\n    //         })\n    //         .then((response) => {\n    //             console.log('updating the state...', response.key);\n    //             changeKeySound(response.key);\n    //         })\n    //         .then(() => {\n    //             setForm({})\n    //             setErrors({})\n    //             setShow(false);\n    //         })\n    //         .catch(e => console.log(e))\n    // }\n\n    // const changeKeySound = (key) => {\n    //     const oldCount = soundCount[key[0]] \n    //     const deleteCount = oldCount > 0 ? oldCount - 1 : 'Nothing';\n    //     const newCount = oldCount + 1;\n    //     const updateKey = key[0]\n    //     const deleteKey = updateKey + deleteCount;\n    //     setSoundCountKey(updateKey, newCount);\n\n    //     fetch(`http://localhost:5000/file/${key}.mp3`)\n    //         .then(async response => {\n    //             const newSound = await response.url;\n    //             setSoundKey(updateKey, newSound);\n    //         })\n    //         .then(alert('New Sound Upload!'))\n    //         .then(deleteOldSound(deleteKey))\n    //         .catch(e => console.log(e))\n    // }\n\n    // const deleteOldSound = (deleteKey) => {\n    //     fetch(`http://localhost:5000/file/${deleteKey}.mp3`, {\n    //         method: 'DELETE'\n    //     })\n    //     .then(async response => {\n    //         console.log(response);\n    //         const resposneMessage = await response.json();\n    //         console.log('', resposneMessage);\n    //     })\n    // }\n\n\n    // const changeA = (key) => {\n    //     const oldCount = soundCount[key[0]] \n    //     const deleteCount = oldCount > 0 ? oldCount - 1 : 'Nothing';\n    //     const newCount = oldCount + 1;\n    //     const updateKey = key[0]\n    //     const deleteKey = updateKey + deleteCount;\n    //     setSoundCountKey(updateKey, newCount);\n\n    //     fetch(`http://localhost:5000/file/${key}.mp3`)\n    //         .then(async response => {\n    //             const newSound = await response.url;\n    //             setSoundA(newSound);\n    //         })\n    //         .then(alert('New Sound Upload!'))\n    //         .then(deleteOldSound(deleteKey))\n    //         .catch(e => console.log(e))\n    // }\n\n    // ================================================\n    //        Form Model Helper Functions\n    // ================================================\n    const handleClose = () => {\n        setForm({});\n        setErrors({});\n        setShow(false);\n    }\n    const handleShow = () => setShow(true);\n\n    // ================================================\n    //        Form Validation Helper Functions\n    // Credit: https://github.com/AlecGrey/demo-form-for-blog\n    // ================================================\n\n    const setField = (field, value) => {\n        setForm({\n          ...form,\n          [field]: value\n        })\n        // Check and see if errors exist, and remove them from the error object:\n        if ( !!errors[field] ) setErrors({\n          ...errors,\n          [field]: null\n        })\n      }\n    \n      const handleSubmit = e => {\n        e.preventDefault()\n        // get our new errors\n        const newErrors = findFormErrors()\n        // Conditional logic:\n        if ( Object.keys(newErrors).length > 0 ) {\n          // We got errors\n          setErrors(newErrors)\n        } else {\n          // No errors\n          getHashName();\n          // uploadSound();\n        }\n      }\n    \n    const findFormErrors = () => {\n        const { key, sound } = form;\n        const newErrors = {};\n        // Key errors\n        if (!key || key === '') newErrors.key = 'Please select the key!'\n        // Sound errors\n        if (!sound || sound === '') newErrors.sound = 'Please upload the sound!'\n        return newErrors;\n    }\n\n    // ================================================\n    //        Create Option Tag Helper Function\n    // ================================================\n    // const makeOption = () => {\n    //     let optionTag = [];         \n    //     for (const letter of letterArray) {             \n    //         optionTag.push(<option key={letter} value={letter+soundCount[letter]}>{letter}</option>);  \n    //     }\n    //     return optionTag;\n    // }\n\n    const makeOption = () => {\n        let optionTag = [];         \n        for (const letter of letterArray) {             \n            optionTag.push(<option key={letter} value={letter}>{letter}</option>);  \n        }\n        return optionTag;\n    }\n\n    return (\n        <div className='container'>\n\n            <h1>FunTyping</h1>\n\n            {/* Text Area */}\n            <textarea \n                className='text-editor' \n                type='text' \n                placeholder='Type Something!'\n                value = {text}\n                onChange={(e) => setText(e.target.value)}\n                onKeyPress={(e) => playSound(e)}\n            >\n            </textarea>\n            \n            {/* Handle Sound Chnage */}\n            <Button variant=\"primary\" onClick={handleShow}>\n                Change Sound\n            </Button>\n            \n            {/* to diable the warning do  animation={false} */}\n            {/* but it doesnt look as good */}\n            <Modal show={show} onHide={handleClose} centered>\n                <Modal.Header closeButton>\n                    <Modal.Title>Select Key & Upload Sounds</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form id='soundForm' name='soundForm'>\n                        <Form.Group>\n                            <Form.Control\n                                name='key'\n                                as='select'\n                                onChange={ e => setField('key', e.target.value) }\n                                isInvalid={ !!errors.key }\n                            >\n                                <option value=''>Choose the key</option>\n                                {makeOption()}\n                                {/* <option value='A'>A</option>\n                                <option value='B'>B</option> */}\n                            </Form.Control>\n                            <Form.Control.Feedback type='invalid'>{ errors.key }</Form.Control.Feedback>\n                        </Form.Group>\n                        {/* <Form.Group>\n                            <Form.Control\n                                name='count'\n                                type=\"text\"\n                                value={soundCount[form['key']] || ''}\n                            />\n                        </Form.Group> */}\n                        <Form.Group>\n                            <Form.File\n                                name='file'\n                                type=\"file\"\n                                onChange={(e) => setField('sound', e.target.files[0])}\n                                isInvalid={ !!errors.sound }\n                                feedback={ errors.sound }\n                            />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={handleSubmit}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    )\n}\n\nexport default TextEditor","/Users/poom/Desktop/funtyping/client/src/components/Animations.js",["39"],"import { useState } from 'react';\nimport React, { Component } from \"react\";\n\nexport default class Animations extends Component {\n    componentDidMount() {\n        const script = document.createElement(\"script\");\n    \n        // script.src = \"../src/animationa/animations.js\";\n        script.src = \"animations.js\";\n        script.async = true;\n    \n        // document.body.appendChild(script);\n        document.querySelector(\"#main\").appendChild(script);\n\n        const app_script = document.createElement(\"script\");\n        // app_script.src = \"../src/animationa/app.js\";\n        app_script.src = \"app.js\";\n        app_script.async = true;\n        document.querySelector(\"#main\").appendChild(app_script);\n      }\n\n    render() {\n        return (\n            <div id=\"main\">\n                <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.2.0/p5.min.js\"></script>\n                {/* <script src=\"../src/animation/animations.js\"></script> */}\n                {/* <script src=\"../src/animation/app.js\"></script> */}\n                <div id=\"scriptTarget\" />\n            </div>\n            )\n    }\n}\n",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":1,"column":10,"nodeType":"46","messageId":"47","endLine":1,"endColumn":18},{"ruleId":"44","severity":1,"message":"48","line":46,"column":12,"nodeType":"46","messageId":"47","endLine":46,"endColumn":18},{"ruleId":"44","severity":1,"message":"49","line":46,"column":20,"nodeType":"46","messageId":"47","endLine":46,"endColumn":29},{"ruleId":"50","severity":1,"message":"51","line":154,"column":17,"nodeType":"52","messageId":"53","endLine":154,"endColumn":21},{"ruleId":"44","severity":1,"message":"54","line":301,"column":11,"nodeType":"46","messageId":"47","endLine":301,"endColumn":27},{"ruleId":"55","severity":1,"message":"56","line":325,"column":8,"nodeType":"57","endLine":325,"endColumn":18,"suggestions":"58"},{"ruleId":"44","severity":1,"message":"59","line":333,"column":19,"nodeType":"46","messageId":"47","endLine":333,"endColumn":34},{"ruleId":"44","severity":1,"message":"45","line":1,"column":10,"nodeType":"46","messageId":"47","endLine":1,"endColumn":18},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'soundA' is assigned a value but never used.","'setSoundA' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","'setSoundCountKey' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'deleteOldSound'. Either include it or remove the dependency array.","ArrayExpression",["62"],"'resposneMessage' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [currHash, deleteOldSound]",{"range":"65","text":"66"},[8523,8533],"[currHash, deleteOldSound]"]