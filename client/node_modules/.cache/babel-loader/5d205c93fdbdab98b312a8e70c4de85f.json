{"ast":null,"code":"var _jsxFileName = \"/Users/poom/Desktop/funtyping/client/src/components/TextEditor.js\",\n    _s = $RefreshSig$();\n\n// ========================================\n//           Import Dependencies\n// ========================================\nimport { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport useSound from 'use-sound';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button'; // ========================================\n//           Initial Sounds Import\n// ========================================\n\nimport bubbleSound from '../assets/bubbles.mp3';\nimport claySound from '../assets/clay.mp3';\nimport confettiSound from '../assets/confetti.mp3';\nimport coronaSound from '../assets/corona.mp3';\nimport dottedSound from '../assets/dotted-spiral.mp3';\nimport flash1Sound from '../assets/flash-1.mp3';\nimport flash2Sound from '../assets/flash-2.mp3';\nimport flash3Sound from '../assets/flash-3.mp3';\nimport glimmerSound from '../assets/glimmer.mp3';\nimport moonSound from '../assets/moon.mp3';\nimport pinwheelSound from '../assets/pinwheel.mp3';\nimport piston1Sound from '../assets/piston-1.mp3';\nimport piston2Sound from '../assets/piston-2.mp3';\nimport piston3Sound from '../assets/piston-3.mp3';\nimport prism1Sound from '../assets/prism-1.mp3';\nimport prism2Sound from '../assets/prism-2.mp3';\nimport prism3Sound from '../assets/prism-3.mp3';\nimport splitsSound from '../assets/splits.mp3';\nimport squiggleSound from '../assets/squiggle.mp3';\nimport strikeSound from '../assets/strike.mp3';\nimport suspensionSound from '../assets/suspension.mp3';\nimport timerSound from '../assets/timer.mp3';\nimport ufoSound from '../assets/ufo.mp3';\nimport veilSound from '../assets/veil.mp3';\nimport wipeSound from '../assets/wipe.mp3';\nimport zigzagSound from '../assets/zig-zag.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TextEditor() {\n  _s();\n\n  // =====================================\n  //              Define States\n  // =====================================\n  const [text, setText] = useState(''); // Text Area State\n\n  const [soundA, setSoundA] = useState(bubbleSound); // Sounds State\n\n  const [sound, setSound] = useState({\n    // Sounds State V2\n    'A': bubbleSound,\n    'B': claySound,\n    'C': confettiSound\n  });\n  const [soundCount, setSoundCount] = useState({\n    'A': 0,\n    'B': 0,\n    'C': 0\n  });\n  const [form, setForm] = useState({}); // Form State\n\n  const [errors, setErrors] = useState({}); // Form Validation State\n\n  const [show, setShow] = useState(false); // Model (Pop-up Form) State\n\n  const letterArray = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\n  const playSound = e => {\n    const key = e.key.toLowerCase();\n\n    switch (key) {\n      case 'a':\n        playA();\n        break;\n\n      case 'b':\n        playB();\n        break;\n\n      case 'c':\n        playC();\n        break;\n\n      case 'd':\n        playD();\n        break;\n\n      case 'e':\n        playE();\n        break;\n\n      case 'f':\n        playF();\n        break;\n\n      case 'g':\n        playG();\n        break;\n\n      case 'h':\n        playH();\n        break;\n\n      case 'i':\n        playI();\n        break;\n\n      case 'j':\n        playJ();\n        break;\n\n      case 'k':\n        playK();\n        break;\n\n      case 'l':\n        playL();\n        break;\n\n      case 'm':\n        playM();\n        break;\n\n      case 'n':\n        playN();\n        break;\n\n      case 'o':\n        playO();\n        break;\n\n      case 'p':\n        playP();\n        break;\n\n      case 'q':\n        playQ();\n        break;\n\n      case 'r':\n        playR();\n        break;\n\n      case 's':\n        playS();\n        break;\n\n      case 't':\n        playT();\n        break;\n\n      case 'u':\n        playU();\n        break;\n\n      case 'v':\n        playV();\n        break;\n\n      case 'w':\n        playW();\n        break;\n\n      case 'x':\n        playX();\n        break;\n\n      case 'y':\n        playY();\n        break;\n\n      case 'z':\n        playZ();\n        break;\n\n      default:\n        const randomIndex = Math.floor(Math.random() * 26);\n        const randomLetter = letterArray[randomIndex];\n        console.log(key);\n        console.log(`play${randomLetter}()`);\n        eval(`play${randomLetter}()`);\n        break;\n    }\n  };\n\n  let [playA] = useSound(sound['A'].slice(1), {\n    //soundA, {\n    interrupt: true\n  });\n  const [playB] = useSound(sound['B'], {\n    //claySound, {\n    interrupt: true\n  });\n  const [playC] = useSound(sound['C'], {\n    // confettiSound, {\n    interrupt: true\n  });\n  const [playD] = useSound(dottedSound, {\n    interrupt: true\n  });\n  const [playE] = useSound(flash1Sound, {\n    interrupt: true\n  });\n  const [playF] = useSound(flash2Sound, {\n    interrupt: true\n  });\n  const [playG] = useSound(flash3Sound, {\n    interrupt: true\n  });\n  const [playH] = useSound(glimmerSound, {\n    interrupt: true\n  });\n  const [playI] = useSound(moonSound, {\n    interrupt: true\n  });\n  const [playJ] = useSound(pinwheelSound, {\n    interrupt: true\n  });\n  const [playK] = useSound(piston1Sound, {\n    interrupt: true\n  });\n  const [playL] = useSound(piston2Sound, {\n    interrupt: true\n  });\n  const [playM] = useSound(piston3Sound, {\n    interrupt: true\n  });\n  const [playN] = useSound(prism1Sound, {\n    interrupt: true\n  });\n  const [playO] = useSound(prism2Sound, {\n    interrupt: true\n  });\n  const [playP] = useSound(prism3Sound, {\n    interrupt: true\n  });\n  const [playQ] = useSound(coronaSound, {\n    interrupt: true\n  });\n  const [playR] = useSound(splitsSound, {\n    interrupt: true\n  });\n  const [playS] = useSound(squiggleSound, {\n    interrupt: true\n  });\n  const [playT] = useSound(strikeSound, {\n    interrupt: true\n  });\n  const [playU] = useSound(suspensionSound, {\n    interrupt: true\n  });\n  const [playV] = useSound(timerSound, {\n    interrupt: true\n  });\n  const [playW] = useSound(ufoSound, {\n    interrupt: true\n  });\n  const [playX] = useSound(veilSound, {\n    interrupt: true\n  });\n  const [playY] = useSound(wipeSound, {\n    interrupt: true\n  });\n  const [playZ] = useSound(zigzagSound, {\n    interrupt: true\n  }); // ================================================\n  //                   Change Sound\n  // ================================================\n\n  const setSoundKey = (key, newSound) => {\n    setSound({ ...sound,\n      [key]: newSound\n    });\n  };\n\n  let update = 1;\n\n  const setSoundCountKey = (key, newCount) => {\n    setSoundCount({ ...soundCount,\n      [key]: newCount\n    });\n  };\n\n  const deleteOldSound = () => {\n    const deleteKey = form['key'];\n    fetch(`http://localhost:5000/file/${deleteKey}.mp3`, {\n      method: 'DELETE'\n    }).then(async response => {\n      console.log(response);\n      const resposneMessage = await response.json();\n      console.log('', resposneMessage);\n    }).then(() => {\n      console.log('start uploading...');\n      uploadSound();\n    });\n  };\n\n  const uploadSound = () => {\n    let soundForm = document.getElementById('soundForm');\n    let formData = new FormData(soundForm);\n    fetch('http://localhost:5000/upload', {\n      method: 'POST',\n      body: formData\n    }).then(async response => {\n      console.log('finish uploading:', response);\n      const resposneMessage = await response.json();\n      return resposneMessage;\n    }).then(response => {\n      console.log('updating the state...', response.key);\n      changeKeySound(response.key);\n    }).then(() => {\n      setForm({});\n      setErrors({});\n      setShow(false);\n    }).catch(e => console.log(e));\n  };\n\n  const changeKeySound = key => {\n    fetch(`http://localhost:5000/file/${key}.mp3`).then(async response => {\n      const newSound = await response.url;\n      console.log(\"change state\");\n      setSoundKey(key, update + newSound);\n      update = update + 1;\n    }).then(() => {\n      console.log(\"finish uploading the sound\");\n      alert('New Sound Upload!');\n    }) // .then(deleteOldSound(key))\n    .catch(e => console.log(e));\n  }; // const uploadSound = () => {\n  //     let soundForm = document.getElementById('soundForm');\n  //     let formData = new FormData(soundForm);\n  //     fetch('http://localhost:5000/upload', {\n  //             method: 'POST',\n  //             body: formData\n  //         })\n  //         .then(async response => {\n  //             console.log('finish uploading:', response);\n  //             const resposneMessage = await response.json();\n  //             return resposneMessage;\n  //         })\n  //         .then((response) => {\n  //             console.log('updating the state...', response.key);\n  //             changeKeySound(response.key);\n  //         })\n  //         .then(() => {\n  //             setForm({})\n  //             setErrors({})\n  //             setShow(false);\n  //         })\n  //         .catch(e => console.log(e))\n  // }\n  // const changeKeySound = (key) => {\n  //     const oldCount = soundCount[key[0]] \n  //     const deleteCount = oldCount > 0 ? oldCount - 1 : 'Nothing';\n  //     const newCount = oldCount + 1;\n  //     const updateKey = key[0]\n  //     const deleteKey = updateKey + deleteCount;\n  //     setSoundCountKey(updateKey, newCount);\n  //     fetch(`http://localhost:5000/file/${key}.mp3`)\n  //         .then(async response => {\n  //             const newSound = await response.url;\n  //             setSoundKey(updateKey, newSound);\n  //         })\n  //         .then(alert('New Sound Upload!'))\n  //         .then(deleteOldSound(deleteKey))\n  //         .catch(e => console.log(e))\n  // }\n  // const deleteOldSound = (deleteKey) => {\n  //     fetch(`http://localhost:5000/file/${deleteKey}.mp3`, {\n  //         method: 'DELETE'\n  //     })\n  //     .then(async response => {\n  //         console.log(response);\n  //         const resposneMessage = await response.json();\n  //         console.log('', resposneMessage);\n  //     })\n  // }\n  // const changeA = (key) => {\n  //     const oldCount = soundCount[key[0]] \n  //     const deleteCount = oldCount > 0 ? oldCount - 1 : 'Nothing';\n  //     const newCount = oldCount + 1;\n  //     const updateKey = key[0]\n  //     const deleteKey = updateKey + deleteCount;\n  //     setSoundCountKey(updateKey, newCount);\n  //     fetch(`http://localhost:5000/file/${key}.mp3`)\n  //         .then(async response => {\n  //             const newSound = await response.url;\n  //             setSoundA(newSound);\n  //         })\n  //         .then(alert('New Sound Upload!'))\n  //         .then(deleteOldSound(deleteKey))\n  //         .catch(e => console.log(e))\n  // }\n  // ================================================\n  //        Form Model Helper Functions\n  // ================================================\n\n\n  const handleClose = () => {\n    setForm({});\n    setErrors({});\n    setShow(false);\n  };\n\n  const handleShow = () => setShow(true); // ================================================\n  //        Form Validation Helper Functions\n  // Credit: https://github.com/AlecGrey/demo-form-for-blog\n  // ================================================\n\n\n  const setField = (field, value) => {\n    setForm({ ...form,\n      [field]: value\n    }); // Check and see if errors exist, and remove them from the error object:\n\n    if (!!errors[field]) setErrors({ ...errors,\n      [field]: null\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault(); // get our new errors\n\n    const newErrors = findFormErrors(); // Conditional logic:\n\n    if (Object.keys(newErrors).length > 0) {\n      // We got errors\n      setErrors(newErrors);\n    } else {\n      // No errors\n      deleteOldSound(); // uploadSound();\n    }\n  };\n\n  const findFormErrors = () => {\n    const {\n      key,\n      sound\n    } = form;\n    const newErrors = {}; // Key errors\n\n    if (!key || key === '') newErrors.key = 'Please select the key!'; // Sound errors\n\n    if (!sound || sound === '') newErrors.sound = 'Please upload the sound!';\n    return newErrors;\n  }; // ================================================\n  //        Create Option Tag Helper Function\n  // ================================================\n  // const makeOption = () => {\n  //     let optionTag = [];         \n  //     for (const letter of letterArray) {             \n  //         optionTag.push(<option key={letter} value={letter+soundCount[letter]}>{letter}</option>);  \n  //     }\n  //     return optionTag;\n  // }\n\n\n  const makeOption = () => {\n    let optionTag = [];\n\n    for (const letter of letterArray) {\n      optionTag.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: letter,\n        children: letter\n      }, letter, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 28\n      }, this));\n    }\n\n    return optionTag;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"FunTyping\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"text-editor\",\n      type: \"text\",\n      placeholder: \"Type Something!\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      onKeyPress: e => playSound(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: handleShow,\n      children: \"Change Sound\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Select Key & Upload Sounds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          id: \"soundForm\",\n          name: \"soundForm\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              name: \"key\",\n              as: \"select\",\n              onChange: e => setField('key', e.target.value),\n              isInvalid: !!errors.key,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Choose the key\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 33\n              }, this), makeOption()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.key\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: /*#__PURE__*/_jsxDEV(Form.File, {\n              name: \"file\",\n              type: \"file\",\n              onChange: e => setField('sound', e.target.files[0]),\n              isInvalid: !!errors.sound,\n              feedback: errors.sound\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleSubmit,\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 509,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TextEditor, \"4XBCOMIzQQwmIecCd+ss84BcTRU=\", false, function () {\n  return [useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound];\n});\n\n_c = TextEditor;\nexport default TextEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"sources":["/Users/poom/Desktop/funtyping/client/src/components/TextEditor.js"],"names":["useState","useSound","Modal","Form","Button","bubbleSound","claySound","confettiSound","coronaSound","dottedSound","flash1Sound","flash2Sound","flash3Sound","glimmerSound","moonSound","pinwheelSound","piston1Sound","piston2Sound","piston3Sound","prism1Sound","prism2Sound","prism3Sound","splitsSound","squiggleSound","strikeSound","suspensionSound","timerSound","ufoSound","veilSound","wipeSound","zigzagSound","TextEditor","text","setText","soundA","setSoundA","sound","setSound","soundCount","setSoundCount","form","setForm","errors","setErrors","show","setShow","letterArray","playSound","e","key","toLowerCase","playA","playB","playC","playD","playE","playF","playG","playH","playI","playJ","playK","playL","playM","playN","playO","playP","playQ","playR","playS","playT","playU","playV","playW","playX","playY","playZ","randomIndex","Math","floor","random","randomLetter","console","log","eval","slice","interrupt","setSoundKey","newSound","update","setSoundCountKey","newCount","deleteOldSound","deleteKey","fetch","method","then","response","resposneMessage","json","uploadSound","soundForm","document","getElementById","formData","FormData","body","changeKeySound","catch","url","alert","handleClose","handleShow","setField","field","value","handleSubmit","preventDefault","newErrors","findFormErrors","Object","keys","length","makeOption","optionTag","letter","push","target","files"],"mappings":"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","sourcesContent":["// ========================================\n//           Import Dependencies\n// ========================================\nimport { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport useSound from 'use-sound';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n// ========================================\n//           Initial Sounds Import\n// ========================================\nimport bubbleSound from '../assets/bubbles.mp3'\nimport claySound from '../assets/clay.mp3'\nimport confettiSound from '../assets/confetti.mp3'\nimport coronaSound from '../assets/corona.mp3'\nimport dottedSound from '../assets/dotted-spiral.mp3'\nimport flash1Sound from '../assets/flash-1.mp3'\nimport flash2Sound from '../assets/flash-2.mp3'\nimport flash3Sound from '../assets/flash-3.mp3'\nimport glimmerSound from '../assets/glimmer.mp3'\nimport moonSound from '../assets/moon.mp3'\nimport pinwheelSound from '../assets/pinwheel.mp3'\nimport piston1Sound from '../assets/piston-1.mp3'\nimport piston2Sound from '../assets/piston-2.mp3'\nimport piston3Sound from '../assets/piston-3.mp3'\nimport prism1Sound from '../assets/prism-1.mp3'\nimport prism2Sound from '../assets/prism-2.mp3'\nimport prism3Sound from '../assets/prism-3.mp3'\nimport splitsSound from '../assets/splits.mp3'\nimport squiggleSound from '../assets/squiggle.mp3'\nimport strikeSound from '../assets/strike.mp3'\nimport suspensionSound from '../assets/suspension.mp3'\nimport timerSound from '../assets/timer.mp3'\nimport ufoSound from '../assets/ufo.mp3'\nimport veilSound from '../assets/veil.mp3'\nimport wipeSound from '../assets/wipe.mp3'\nimport zigzagSound from '../assets/zig-zag.mp3'\n\nfunction TextEditor() {\n    // =====================================\n    //              Define States\n    // =====================================\n    const [text, setText] = useState(''); // Text Area State\n    const [soundA, setSoundA] = useState(bubbleSound) // Sounds State\n    const [sound, setSound] = useState({             // Sounds State V2\n        'A': bubbleSound,\n        'B': claySound,\n        'C': confettiSound\n    })\n    const [soundCount, setSoundCount] = useState({\n        'A': 0,\n        'B': 0,\n        'C': 0\n    })\n\n    const [form, setForm] = useState({}) // Form State\n    const [errors, setErrors] = useState({}) // Form Validation State\n    const [show, setShow] = useState(false); // Model (Pop-up Form) State\n\n\n    const letterArray = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\n    'M', 'N', 'O', 'P', 'Q', 'R',  'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z' ];\n\n    const playSound = (e) => {\n        const key = e.key.toLowerCase();\n        switch (key) {\n            case 'a': \n                playA();\n                break;\n            case 'b': \n                playB();\n                break;\n            case 'c':\n                playC();\n                break;\n            case 'd':\n                playD();\n                break;\n            case 'e':\n                playE();\n                break;\n            case 'f':\n                playF();\n                break;\n            case 'g':\n                playG();\n                break;\n            case 'h':\n                playH();\n                break;\n            case 'i':\n                playI();\n                break;\n            case 'j':\n                playJ();\n                break;\n            case 'k':\n                playK();\n                break;\n            case 'l':\n                playL();\n                break;\n            case 'm':\n                playM();\n                break;\n            case 'n':\n                playN();\n                break;\n            case 'o':\n                playO();  \n                break;\n            case 'p':\n                playP(); \n                break;\n            case 'q':\n                playQ();\n                break;\n            case 'r':\n                playR();\n                break;\n            case 's':\n                playS();\n                break;\n            case 't':\n                playT();\n                break;\n            case 'u':\n                playU();\n                break;\n            case 'v':\n                playV();\n                break;\n            case 'w':\n                playW();\n                break;\n            case 'x':\n                playX();\n                break;\n            case 'y':\n                playY();\n                break;\n            case 'z':\n                playZ();\n                break;\n            default:\n                const randomIndex = Math.floor(Math.random() * 26);\n                const randomLetter = letterArray[randomIndex];\n                console.log(key);\n                console.log(`play${randomLetter}()`);\n                eval(`play${randomLetter}()`);\n                break;\n        }\n    }\n    \n    let [playA] = useSound(\n        sound['A'].slice(1,), {\n        //soundA, {\n            interrupt: true,\n        });\n\n    const [playB] = useSound(\n        sound['B'], {\n        //claySound, {\n            interrupt: true,\n        });\n\n    const [playC] = useSound(\n        sound['C'], {\n        // confettiSound, {\n            interrupt: true,\n        });\n    \n    const [playD] = useSound(\n        dottedSound, {\n            interrupt: true,\n        });\n\n    const [playE] = useSound(\n        flash1Sound, {\n            interrupt: true,\n        });\n\n    const [playF] = useSound(\n        flash2Sound, {\n            interrupt: true,\n        });\n\n    const [playG] = useSound(\n        flash3Sound, {\n            interrupt: true,\n        });\n\n    const [playH] = useSound(\n        glimmerSound, {\n            interrupt: true,\n        });\n\n    const [playI] = useSound(\n        moonSound, {\n            interrupt: true,\n        });\n\n    const [playJ] = useSound(\n        pinwheelSound, {\n            interrupt: true,\n        });\n\n    const [playK] = useSound(\n        piston1Sound, {\n            interrupt: true,\n        });\n\n    const [playL] = useSound(\n        piston2Sound, {\n            interrupt: true,\n        });\n\n    const [playM] = useSound(\n        piston3Sound, {\n            interrupt: true,\n        });\n\n    const [playN] = useSound(\n        prism1Sound, {\n            interrupt: true,\n        });\n\n    const [playO] = useSound(\n        prism2Sound, {\n            interrupt: true,\n        });\n\n    const [playP] = useSound(\n        prism3Sound, {\n            interrupt: true,\n        });\n\n    const [playQ] = useSound(\n        coronaSound, {\n            interrupt: true,\n        });\n    const [playR] = useSound(\n        splitsSound, {\n            interrupt: true,\n        });\n\n    const [playS] = useSound(\n        squiggleSound, {\n            interrupt: true,\n        });\n\n    const [playT] = useSound(\n        strikeSound, {\n            interrupt: true,\n        });\n\n    const [playU] = useSound(\n        suspensionSound, {\n            interrupt: true,\n        });\n\n    const [playV] = useSound(\n        timerSound, {\n            interrupt: true,\n        });\n\n    const [playW] = useSound(\n        ufoSound, {\n            interrupt: true,\n        });\n\n    const [playX] = useSound(\n        veilSound, {\n            interrupt: true,\n        });\n\n    const [playY] = useSound(\n        wipeSound, {\n            interrupt: true,\n        });\n        \n    const [playZ] = useSound(\n        zigzagSound, {\n            interrupt: true,\n        });\n\n    // ================================================\n    //                   Change Sound\n    // ================================================\n    const setSoundKey = (key, newSound) => {\n        setSound({\n            ...sound,\n            [key]: newSound\n          })\n    }\n\n    let update = 1\n    const setSoundCountKey = (key, newCount) => {\n        setSoundCount({\n            ...soundCount,\n            [key]: newCount\n        })\n    }\n\n    const deleteOldSound = () => {\n        const deleteKey = form['key'];\n        fetch(`http://localhost:5000/file/${deleteKey}.mp3`, {\n            method: 'DELETE'\n        })\n        .then(async response => {\n            console.log(response);\n            const resposneMessage = await response.json();\n            console.log('', resposneMessage);\n        })\n        .then(() => {\n            console.log('start uploading...')\n            uploadSound()\n        })\n    }\n\n    const uploadSound = () => {\n        let soundForm = document.getElementById('soundForm');\n        let formData = new FormData(soundForm);\n        fetch('http://localhost:5000/upload', {\n                method: 'POST',\n                body: formData\n            })\n            .then(async response => {\n                console.log('finish uploading:', response);\n                const resposneMessage = await response.json();\n                return resposneMessage;\n            })\n            .then((response) => {\n                console.log('updating the state...', response.key);\n                changeKeySound(response.key);\n            })\n            .then(() => {\n                setForm({})\n                setErrors({})\n                setShow(false);\n            })\n            .catch(e => console.log(e))\n    }\n\n    const changeKeySound = (key) => {\n        fetch(`http://localhost:5000/file/${key}.mp3`)\n            .then(async response => {\n                const newSound = await response.url;\n                console.log(\"change state\")\n                setSoundKey(key, update + newSound);\n                update = update + 1\n            })\n            .then(() => {\n                console.log(\"finish uploading the sound\")\n                alert('New Sound Upload!')\n            })\n            // .then(deleteOldSound(key))\n            .catch(e => console.log(e))\n    }\n\n\n    // const uploadSound = () => {\n    //     let soundForm = document.getElementById('soundForm');\n    //     let formData = new FormData(soundForm);\n    //     fetch('http://localhost:5000/upload', {\n    //             method: 'POST',\n    //             body: formData\n    //         })\n    //         .then(async response => {\n    //             console.log('finish uploading:', response);\n    //             const resposneMessage = await response.json();\n    //             return resposneMessage;\n    //         })\n    //         .then((response) => {\n    //             console.log('updating the state...', response.key);\n    //             changeKeySound(response.key);\n    //         })\n    //         .then(() => {\n    //             setForm({})\n    //             setErrors({})\n    //             setShow(false);\n    //         })\n    //         .catch(e => console.log(e))\n    // }\n\n    // const changeKeySound = (key) => {\n    //     const oldCount = soundCount[key[0]] \n    //     const deleteCount = oldCount > 0 ? oldCount - 1 : 'Nothing';\n    //     const newCount = oldCount + 1;\n    //     const updateKey = key[0]\n    //     const deleteKey = updateKey + deleteCount;\n    //     setSoundCountKey(updateKey, newCount);\n\n    //     fetch(`http://localhost:5000/file/${key}.mp3`)\n    //         .then(async response => {\n    //             const newSound = await response.url;\n    //             setSoundKey(updateKey, newSound);\n    //         })\n    //         .then(alert('New Sound Upload!'))\n    //         .then(deleteOldSound(deleteKey))\n    //         .catch(e => console.log(e))\n    // }\n\n    // const deleteOldSound = (deleteKey) => {\n    //     fetch(`http://localhost:5000/file/${deleteKey}.mp3`, {\n    //         method: 'DELETE'\n    //     })\n    //     .then(async response => {\n    //         console.log(response);\n    //         const resposneMessage = await response.json();\n    //         console.log('', resposneMessage);\n    //     })\n    // }\n\n\n    // const changeA = (key) => {\n    //     const oldCount = soundCount[key[0]] \n    //     const deleteCount = oldCount > 0 ? oldCount - 1 : 'Nothing';\n    //     const newCount = oldCount + 1;\n    //     const updateKey = key[0]\n    //     const deleteKey = updateKey + deleteCount;\n    //     setSoundCountKey(updateKey, newCount);\n\n    //     fetch(`http://localhost:5000/file/${key}.mp3`)\n    //         .then(async response => {\n    //             const newSound = await response.url;\n    //             setSoundA(newSound);\n    //         })\n    //         .then(alert('New Sound Upload!'))\n    //         .then(deleteOldSound(deleteKey))\n    //         .catch(e => console.log(e))\n    // }\n\n    // ================================================\n    //        Form Model Helper Functions\n    // ================================================\n    const handleClose = () => {\n        setForm({});\n        setErrors({});\n        setShow(false);\n    }\n    const handleShow = () => setShow(true);\n\n    // ================================================\n    //        Form Validation Helper Functions\n    // Credit: https://github.com/AlecGrey/demo-form-for-blog\n    // ================================================\n\n    const setField = (field, value) => {\n        setForm({\n          ...form,\n          [field]: value\n        })\n        // Check and see if errors exist, and remove them from the error object:\n        if ( !!errors[field] ) setErrors({\n          ...errors,\n          [field]: null\n        })\n      }\n    \n      const handleSubmit = e => {\n        e.preventDefault()\n        // get our new errors\n        const newErrors = findFormErrors()\n        // Conditional logic:\n        if ( Object.keys(newErrors).length > 0 ) {\n          // We got errors\n          setErrors(newErrors)\n        } else {\n          // No errors\n          deleteOldSound();\n          // uploadSound();\n        }\n      }\n    \n    const findFormErrors = () => {\n        const { key, sound } = form;\n        const newErrors = {};\n        // Key errors\n        if (!key || key === '') newErrors.key = 'Please select the key!'\n        // Sound errors\n        if (!sound || sound === '') newErrors.sound = 'Please upload the sound!'\n        return newErrors;\n    }\n\n    // ================================================\n    //        Create Option Tag Helper Function\n    // ================================================\n    // const makeOption = () => {\n    //     let optionTag = [];         \n    //     for (const letter of letterArray) {             \n    //         optionTag.push(<option key={letter} value={letter+soundCount[letter]}>{letter}</option>);  \n    //     }\n    //     return optionTag;\n    // }\n\n    const makeOption = () => {\n        let optionTag = [];         \n        for (const letter of letterArray) {             \n            optionTag.push(<option key={letter} value={letter}>{letter}</option>);  \n        }\n        return optionTag;\n    }\n\n    return (\n        <div className='container'>\n\n            <h1>FunTyping</h1>\n\n            {/* Text Area */}\n            <textarea \n                className='text-editor' \n                type='text' \n                placeholder='Type Something!'\n                value = {text}\n                onChange={(e) => setText(e.target.value)}\n                onKeyPress={(e) => playSound(e)}\n            >\n            </textarea>\n            \n            {/* Handle Sound Chnage */}\n            <Button variant=\"primary\" onClick={handleShow}>\n                Change Sound\n            </Button>\n            \n            {/* to diable the warning do  animation={false} */}\n            {/* but it doesnt look as good */}\n            <Modal show={show} onHide={handleClose} centered>\n                <Modal.Header closeButton>\n                    <Modal.Title>Select Key & Upload Sounds</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form id='soundForm' name='soundForm'>\n                        <Form.Group>\n                            <Form.Control\n                                name='key'\n                                as='select'\n                                onChange={ e => setField('key', e.target.value) }\n                                isInvalid={ !!errors.key }\n                            >\n                                <option value=''>Choose the key</option>\n                                {makeOption()}\n                                {/* <option value='A'>A</option>\n                                <option value='B'>B</option> */}\n                            </Form.Control>\n                            <Form.Control.Feedback type='invalid'>{ errors.key }</Form.Control.Feedback>\n                        </Form.Group>\n                        {/* <Form.Group>\n                            <Form.Control\n                                name='count'\n                                type=\"text\"\n                                value={soundCount[form['key']] || ''}\n                            />\n                        </Form.Group> */}\n                        <Form.Group>\n                            <Form.File\n                                name='file'\n                                type=\"file\"\n                                onChange={(e) => setField('sound', e.target.files[0])}\n                                isInvalid={ !!errors.sound }\n                                feedback={ errors.sound }\n                            />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={handleSubmit}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    )\n}\n\nexport default TextEditor"]},"metadata":{},"sourceType":"module"}